
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'Admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own profile during signup
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can read their own profile. Admins can read any profile.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      // Users can update their own profile. Admins can update any profile (e.g., to disable an account).
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      // Only admins can delete user profiles.
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
      // Admins can list all users.
      allow list: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for the 'ads' collection
    match /ads/{adId} {
      // Any authenticated user can create an ad.
      allow create: if request.auth != null;
      // Any user (even unauthenticated) can read approved ads.
      // Authenticated users can read their own ads regardless of status.
      // Admins can read any ad regardless of status.
      allow read: if resource.data.status == 'approved' || 
                   (request.auth != null && (request.auth.uid == resource.data.userId || isAdmin(request.auth.uid)));
      // Users can update their own ads. Admins can update any ad (e.g., to approve/reject).
      allow update: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin(request.auth.uid));
      // Users can delete their own ads. Admins can delete any ad.
      allow delete: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin(request.auth.uid));
      // Allow listing of ads. Further filtering is done in the app's query.
      allow list: if true;
    }
    
    // Rules for the 'config' collection (for payment settings)
    match /config/{docId} {
        // Everyone can read the configuration
        allow read: if true;
        // Only Admins can write to the configuration
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for 'conversations' collection and 'messages' subcollection
    match /conversations/{conversationId} {
        // Only participants of a conversation can access it.
        allow read, write, delete: if request.auth != null && request.auth.uid in resource.data.participants;
        allow create: if request.auth != null;

        match /messages/{messageId} {
            // Only participants of the parent conversation can access messages.
            allow read, write, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }
  }
}
