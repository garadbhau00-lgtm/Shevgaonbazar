rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthOwner(resource) {
      return request.auth.uid == resource.data.userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isUser(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }
    
    match /users/{userId} {
      // Anyone can create their own user profile document.
      allow create: if request.auth.uid == userId;
      // Users can view their own profile. Admins can view any profile.
      allow get: if request.auth.uid == userId || isAdmin();
      // Users can update their own name and mobile. Admins can update anything.
      allow update: if (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'mobileNumber', 'updatedAt'])) || isAdmin();
      // Only admins can delete users.
      allow delete: if isAdmin();
      // Admins can list all users.
      allow list: if isAdmin();
    }
    
    match /ads/{adId} {
      // Any authenticated user can create an ad.
      allow create: if request.auth != null;
      // Anyone can read an approved ad. Users can read their own ads regardless of status.
      allow get: if resource.data.status == 'approved' || isAuthOwner(resource);
      // Anyone can query approved ads.
      allow list: if request.query.get('status') == 'approved';

      // Users can update their own ads, but cannot approve them.
      // Admins can update any ad, including changing status.
      allow update: if (isAuthOwner(resource) && !('status' in request.resource.data.diff(resource.data).affectedKeys())) || isAdmin();

      // Users can delete their own ads. Admins can delete any ad.
      allow delete: if isAuthOwner(resource) || isAdmin();
    }
    
    match /conversations/{conversationId} {
      allow read, write: if request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow create, read, write: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    match /help_messages/{messageId} {
      allow create: if request.auth != null;
      allow read, write, delete: if isAdmin();
    }
  }
}
