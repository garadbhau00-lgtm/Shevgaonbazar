rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Ads: Public read for approved, owner can write, admin can do anything
    match /ads/{adId} {
      allow read: if resource.data.status == 'approved' || (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if (isAuthenticated() && request.resource.data.userId == request.auth.uid) || isAdmin();
    }

    // Users: Can read/write their own profile. Admins can read any profile.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId);
    }
    
    // Config: Only Admins can write
    match /config/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Notifications: User can only access their own. Admins can create/delete for anyone.
    match /notifications/{notificationId} {
        allow read, update, delete: if isOwner(resource.data.userId);
        allow create: if isAdmin();
    }
    
    // Issues: Users can create. Admins can do anything.
    match /issues/{issueId} {
        allow create: if isAuthenticated();
        allow read, write, delete: if isAdmin();
    }

    // Conversations & Messages
    match /conversations/{conversationId} {
      // Allow read/write if the user is one of the participants in the conversation
      allow read, write, update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      // Allow creation if the user is one of the participants in the new document
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Allow read if user is a participant in the parent conversation
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        // Allow create if user is the sender and is a participant in the conversation
        allow create: if isAuthenticated() && request.resource.data.senderId == request.auth.uid && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
  }
}
