
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    match /users/{userId} {
      allow read;
      allow create: if isSignedIn();
      allow update, delete: if isUser(userId) || isAdmin();
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    match /ads/{adId} {
      allow read: if resource.data.status == 'approved' || 
                      (isSignedIn() && resource.data.userId == request.auth.uid) || 
                      isAdmin();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && (isUser(resource.data.userId) || isAdmin());
      allow delete: if isSignedIn() && (isUser(resource.data.userId) || isAdmin());
    }

    match /conversations/{conversationId} {
      allow read, update, delete: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;
    }

    match /conversations/{conversationId}/messages/{messageId} {
      allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if isSignedIn() && isUser(resource.data.userId);
      allow create: if isSignedIn(); // Admins or system can create notifications
    }
    
    match /issues/{issueId} {
      allow list, read, update, delete: if isAdmin();
      allow create: if isSignedIn();
    }

    match /config/advertisement {
      allow read;
      allow write: if isAdmin();
    }
  }
}
