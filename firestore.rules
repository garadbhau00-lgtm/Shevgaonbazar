
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Allow anyone to create their own user document during signup.
    // - Allow any authenticated user to read public user profiles (for chat, etc.).
    // - Allow users to only update their own profile.
    // - Deny deletion of user profiles.
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;

      // Saved Ads Subcollection
      // - Allow users to manage (create, delete) ads only in their own savedAds list.
      match /savedAds/{adId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Ads Collection
    // - Allow any authenticated user to read approved ads.
    // - Allow admins to read any ad regardless of status.
    // - Allow users to create ads (they will be 'pending' by default).
    // - Allow users to update their own ads, and admins to update any ad.
    // - Allow users to delete their own ads, and admins to delete any ad.
    match /ads/{adId} {
      allow read: if request.auth != null && (resource.data.status == 'approved' || resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
      allow delete: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
    }

    // Conversations Collection
    // - Allow users to read/write to conversations they are a part of.
    // - Allow a user to create a new conversation if they are one of the participants.
    match /conversations/{conversationId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      
      // Messages Subcollection
      // - Allow participants of a conversation to read and create messages.
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow update, delete: if false; 
      }
    }

    // Notifications Collection
    // - Allow users to only access notifications intended for them.
    // - Admins can read all notifications for moderation.
    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null; // Allows admins/system to create notifications for users
    }

    // Issues Collection
    // - Allow anyone to create an issue (report a problem).
    // - Allow users to read issues they created.
    // - Allow admins to read and update any issue.
    match /issues/{issueId} {
      allow create: if true;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    
    // Config collection
    // - Allow anyone to read configuration (like advertisements).
    // - Only allow admins to write to configuration.
    match /config/{configId} {
        allow read: if true;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
  }
}
