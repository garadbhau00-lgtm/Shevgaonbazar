rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an Admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'Admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read and write to any user's profile
      // Users can create their own profile
      // Users can read their own profile
      // Users can update their own name and mobileNumber
      allow read, update: if isAdmin(request.auth.uid) || isOwner(userId);
      allow create: if isOwner(userId);
    }

    // Rules for the 'ads' collection
    match /ads/{adId} {
      // Anyone can read an ad that has been approved
      allow get: if resource.data.status == 'approved';
      
      // Logged-in users can read ads that are not theirs but are approved
      allow list: if isAuthenticated() && resource.data.status == 'approved';
      
      // The owner of an ad or an admin can read the ad, regardless of status
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin(request.auth.uid));

      // A logged-in user can create a new ad, but must be the owner.
      // Status must be set to 'pending' on creation.
      allow create: if isAuthenticated() 
                    && isOwner(request.resource.data.userId) 
                    && request.resource.data.status == 'pending';
      
      // The owner can update their own ad.
      // An admin can update any ad (for approval/rejection).
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin(request.auth.uid));

      // The owner or an admin can delete an ad.
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin(request.auth.uid));
    }
    
    // Rules for conversations
    match /conversations/{conversationId} {
        // Only participants of the conversation or admins can read/write
        allow read, write: if isAuthenticated() && (request.auth.uid in resource.data.participants || isAdmin(request.auth.uid));

        // Rules for messages within a conversation
        match /messages/{messageId} {
            // Only participants of the parent conversation can read/write messages
            allow read, write: if isAuthenticated() && (request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants || isAdmin(request.auth.uid));
        }
    }
  }
}
