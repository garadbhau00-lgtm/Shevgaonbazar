
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Authenticated users can read any user profile (for chat names/photos).
    // - A user can only create, update, or delete their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    
    // Saved Ads Subcollection
    // - A user can only manage their own list of saved ads.
    match /users/{userId}/savedAds/{adId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Ads Collection
    // - Anyone (authenticated or not) can read approved ads.
    // - An authenticated user can create an ad.
    // - A user can only update or delete their own ad.
    // - An admin can update or delete any ad.
    match /ads/{adId} {
      allow read: if resource.data.status == 'approved' || (request.auth != null && resource.data.userId == request.auth.uid) || (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
      allow create: if request.auth != null;
      allow update, delete: if (request.auth != null && resource.data.userId == request.auth.uid) || (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
    }

    // Conversations Collection
    // - A user can read/write a conversation only if they are a participant.
    // - A user can create a conversation only if their UID is in the participants list.
    match /conversations/{conversationId} {
      allow read, write: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid in request.resource.data.participants;
    }

    // Messages Subcollection
    // - A user can read/write messages in a conversation only if they are a participant in the parent conversation.
    match /conversations/{conversationId}/messages/{messageId} {
      allow read, write: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }

    // Notifications Collection
    // - Admins can read all notifications.
    // - A user can only read or delete their own notifications.
    // - Admins can create notifications (for broadcasts/admin actions).
    // - The system (server-side) can create notifications for users (ad status etc).
    match /notifications/{notificationId} {
      allow read, delete: if resource.data.userId == request.auth.uid || (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');
      allow create: if (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin') || request.auth == null; // Null auth allows server-side creation
      allow update: if resource.data.userId == request.auth.uid; // User can mark as read
    }

    // Config Collection (e.g., for site-wide Advertisement)
    // - Anyone can read configuration.
    // - Only Admins can write/update configuration.
    match /config/{configId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    
    // Issues Collection
    // - Authenticated users can create issues.
    // - Only Admins can read, update or delete issues.
    match /issues/{issueId} {
      allow create: if request.auth.uid != null;
      allow read, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
  }
}
