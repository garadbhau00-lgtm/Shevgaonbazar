
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read a user's profile (needed for names/photos in chat).
      allow read: if isAuthenticated();
      // Only the user themselves can create or update their own profile.
      allow write: if isOwner(userId);
    }
    
    // Rules for user-specific subcollections
    match /users/{userId}/{collection}/{docId} {
        // Only the owner can read/write to their own subcollections (e.g., savedAds).
        allow read, write: if isOwner(userId);
    }
    
    // Rules for the 'ads' collection
    match /ads/{adId} {
      // Allow read access to approved ads for any authenticated user.
      // Allow read access to any ad if the user is its owner.
      allow read: if isAuthenticated() && (resource.data.status == 'approved' || isOwner(resource.data.userId));
      
      // Allow create and update only for the owner. Updates are only allowed if the ad is not yet approved.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && isOwner(request.resource.data.userId) && resource.data.status != 'approved';

      // Allow delete only for the owner or an Admin.
      function isRole(role) {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
      }
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isRole('Admin'));
    }

    // Rules for the 'conversations' collection
    match /conversations/{conversationId} {
        // Allow read/write access only to participants of the conversation.
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participants;
        
        // Allow create access if the requesting user is one of the participants.
        allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
        
        // Rules for messages within a conversation
        match /messages/{messageId} {
            // Participants can read all messages in the conversation.
            allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
            // Only authenticated users who are part of the conversation can create messages.
            allow create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
    }
    
    // Rules for notifications
    match /notifications/{notificationId} {
        // Users can only read, update, or delete their own notifications.
        allow read, update, delete: if isAuthenticated() && isOwner(resource.data.userId);
        // Any authenticated process (like a server function or admin action) can create notifications.
        // Or a user can create a notification for another user (e.g. admin notifying user)
        allow create: if isAuthenticated();
    }
    
    // Rules for issues
    match /issues/{issueId} {
        // Users can create issues.
        allow create: if isAuthenticated();
        // Users can read their own issues. Admins can read all issues.
        allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isRole('Admin'));
        // Only Admins can update issue status.
        allow update: if isAuthenticated() && isRole('Admin');
    }

    // Rules for config documents (e.g. advertisement)
    match /config/{configId} {
        // All users can read config.
        allow read: if isAuthenticated();
        // Only admins can write/update config.
        allow write: if isAuthenticated() && isRole('Admin');
    }
  }
}
