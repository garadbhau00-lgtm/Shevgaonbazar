
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isAdmin();
    }

    // Rules for 'ads' collection
    match /ads/{adId} {
      allow read: if resource.data.status == 'approved' || (isUserAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
      allow list: if isUserAuthenticated();
      allow create: if isUserAuthenticated();
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Rules for 'conversations' and 'messages'
    match /conversations/{conversationId} {
      allow read, create: if isUserAuthenticated() && request.auth.uid in resource.data.participants;
      allow update: if isUserAuthenticated() && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
        allow read, update, delete: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isUserAuthenticated(); // Admins create for others, users might trigger for themselves
    }
    
    // Rules for 'issues' collection
    match /issues/{issueId} {
        allow read, update, delete: if isAdmin();
        allow create: if isUserAuthenticated();
    }
  }
}
