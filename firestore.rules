
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow public read access to ads with status 'approved'
    match /ads/{adId} {
      allow get: if resource.data.status == 'approved';
      allow list: if resource.data.status == 'approved';
      
      // Allow users to manage their own ads
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Config collection - Admins only
    match /config/{docId} {
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Users can only read/write their own user profile
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
       // Admins can read/write any user profile
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
      allow create: if request.auth != null;
    }
    
    match /conversations/{conversationId} {
      // Participants can read/update the conversation
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // A user can create a conversation if they are a participant
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
        // Participants can list and create messages
        allow list, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow read: if request.auth != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }
    }
    
    // Notifications are private to each user
    match /notifications/{notificationId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
    }
    
     // Issues collection rules
    match /issues/{issueId} {
      // Allow any authenticated user to create an issue
      allow create: if request.auth != null;
      
      // Allow the user who created it or an admin to read/update it
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin');

      // Only Admins can delete issues
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    
    // Allow admins to list any collection for management purposes
    match /users/{userId} {
        allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    match /ads/{adId} {
        allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
     match /issues/{issueId} {
        allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
  }
}
